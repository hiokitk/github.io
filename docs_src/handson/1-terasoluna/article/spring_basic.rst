SpringFrameWorkにおける主要機能
=====================================================
本章ではTERASOLUNA Server FrameworkのベースとなるSpringFrameWorkの主な機能について簡単にまとめる

SpringFrameWorkとは
^^^^^^^^^^^^^^^^^^^^
* Spring Frameworkとは、Javaの開発環境で使用できるオープンソースのフレームワークである。
* Spring Frameworkは数多くのプロジェクトによって構築されており、作りたいシステムによってプロジェクトを使い分けることができる。

  https://spring.io/projects

  .. csv-table::

   "名称", "特徴"
   "Spring Cloud", "クラウドアプリケーションの開発や構築に特化したプロジェクト"
   "Spring Security", "セキュリティ機能の開発をサポートするプロジェクト"
   "Spring Batch", "データの集計処理といったバッチ処理のシステム構築向けのプロジェクト"
   "Spring Session", "セッション情報を管理するためシステム構築に特化したプロジェクト"

* 豊富なプロジェクトを有し、幅広い開発に対応しているという一方で、規模の大きさゆえに学習コストが高い・全体を把握しにくいという欠点もある。


特徴①：DI
^^^^^^^^^^^
* DIとは、依存性(Dependency)を注入(Injection)する機能のこと。Javaクラスから別のクラスを呼び出すために用いる。
* Javaでオブジェクトを生成する場合、new演算子でbean化(インスタンス化)することになるが、
  オブジェクトにアノテーションを付与することで、ApplicationContextによって、beanの自動生成と依存クラスへの設定が可能となっている。
* また、beanへのプロパティも設定ファイル上に定義することになるため、プロパティの変更時もソースコードの修正が発生しなくて済む。
* 例えば、2つの依存関係にあるクラスが存在する場合、一方が未完成だとテストができないが、DIによりクラスの依存関係が解消されると、独立したプログラムとしてテストや改修ができるようになる


特徴②：アノテーション
^^^^^^^^^^^^^^^^^^^^^^^
* アノテーションとは、ソースコードに注釈を加えることで、プログラムの動作を変更したり、フレームワークに処理を指示したりできる仕組み。
* Springの場合、DIする情報を全て設定ファイルに定義してしまうと複雑になってしまうため、一部はアノテーションよって設定を有効にする。
* 代表的なものとしては以下のようなものがある。コード量が減少し、ソースコードの可読性が上がるというメリットがある。

  .. csv-table::

   "@Component", "付与することで、クラスがSpringのDIコンテナにBeanとして登録される"
   "@Transactional", "付与することで、トランザクション制御が行われる（開始・終了やコミット、ロールバック等の管理）"
   "@Controller", "付与することで、Controllerクラスとして認識され、コンポーネントスキャンの対象となる"
   "@RequestMapping", "付与することでURLのルートになり、各メソッドはルートからの相対パスのURLにマッピングされる"
   "@ModelAttribute", "使うことで、FormオブジェクトとHTML formを結びつけることができる"



特徴③：AOP
^^^^^^^^^^^^^^^
* Aspect Oriented Programming（アスペクト指向プログラミング）という技法。
* プログラムの特定の振る舞いをそのプログラム本体から分離し、いつでも組み込んだり取り除いたりできるようにする仕組み。
* 例えば、ログ出力処理など、複数のクラスをまたがって実行したい処理について、アスペクトとして、別クラスに切り出してアノテーション化することで、
  呼び出し元クラスからは、ロガーのアノテーションを付与するだけでログ出力処理が実行可能となる。



